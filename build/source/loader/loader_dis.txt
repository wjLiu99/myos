
/root/myos/build/source/loader/loader.elf：     文件格式 elf32-i386
/root/myos/build/source/loader/loader.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00008000

程序头：
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x000002a9 memsz 0x000002a9 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x0000003b memsz 0x0000003b flags r--
    LOAD off    0x0000203c vaddr 0x0000a03c paddr 0x0000a03c align 2**12
         filesz 0x00000018 memsz 0x00000078 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a9  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000003b  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  0000a03c  0000a03c  0000203c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  0000a060  0000a060  00002054  2**5
                  ALLOC
  4 .comment      0000002b  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00002080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000003d5  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000001af  00000000  00000000  000024ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000001fd  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000118  00000000  00000000  0000285c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000028e  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000018  00000000  00000000  00002c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00009000 l    d  .rodata	00000000 .rodata
0000a03c l    d  .data	00000000 .data
0000a060 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008003 l     F .text	0000000b cli
0000800e l     F .text	0000002a inb
00008038 l     F .text	00000030 outb
00008068 l     F .text	0000003c lgdt
000080a4 l     F .text	00000040 show_msg
000080e4 l     F .text	0000013d detect_memory
00008221 l     F .text	00000061 enter_protect_m
00000000 l    df *ABS*	00000000 loader_32.c
00008282 g     F .text	00000027 loader_entry
0000a03c g     O .data	00000018 gdt_table
0000a060 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
0000a054 g       .bss	00000000 __bss_start
0000a054 g       .data	00000000 _edata
0000a0b4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
	.global _start
_start:
	


    jmp loader_entry
    8000:	e9 7f 02             	jmp    8282 <loader_entry>

00008003 <cli>:
#ifndef CPU_INT_H
#define CPU_INT_H
#include"types.h"
//关中断
static inline void cli(void){
    8003:	66 55                	push   %ebp
    8005:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    8008:	fa                   	cli    
}
    8009:	90                   	nop
    800a:	66 5d                	pop    %ebp
    800c:	66 c3                	retl   

0000800e <inb>:
//开中断
static inline void sti(void){
    __asm__ __volatile__("sti");
}
//读端口
static inline uint8_t inb(uint16_t port){
    800e:	66 55                	push   %ebp
    8010:	66 89 e5             	mov    %esp,%ebp
    8013:	66 83 ec 14          	sub    $0x14,%esp
    8017:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    801c:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t ret;
    __asm__ __volatile__("inb %[p],%[r]":[r]"=a"(ret):[p]"d"(port));
    8020:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8026:	66 89 c2             	mov    %eax,%edx
    8029:	ec                   	in     (%dx),%al
    802a:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return ret;
    802e:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax

}
    8034:	66 c9                	leavel 
    8036:	66 c3                	retl   

00008038 <outb>:

//写端口
static inline void outb(uint16_t port,uint8_t data){
    8038:	66 55                	push   %ebp
    803a:	66 89 e5             	mov    %esp,%ebp
    803d:	66 83 ec 08          	sub    $0x8,%esp
    8041:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8046:	67 66 8b 55 0c       	mov    0xc(%ebp),%edx
    804b:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    804f:	66 89 d0             	mov    %edx,%eax
    8052:	67 88 45 f8          	mov    %al,-0x8(%ebp)

    __asm__ __volatile__("outb %[d],%[p]"::[d]"a"(data),[p]"d"(port));
    8056:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    805c:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8062:	ee                   	out    %al,(%dx)
}
    8063:	90                   	nop
    8064:	66 c9                	leavel 
    8066:	66 c3                	retl   

00008068 <lgdt>:

//加载gdt表
static inline void lgdt(uint32_t start ,uint32_t size){
    8068:	66 55                	push   %ebp
    806a:	66 89 e5             	mov    %esp,%ebp
    806d:	66 83 ec 10          	sub    $0x10,%esp
    struct{
        uint16_t limit;
        uint32_t start0_15;
        uint32_t start16_31;
    }gdt;
    gdt.limit = size -1;
    8071:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8076:	66 83 e8 01          	sub    $0x1,%eax
    807a:	67 89 45 f4          	mov    %ax,-0xc(%ebp)
    gdt.start0_15 = start >>16;
    807e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8083:	66 c1 e8 10          	shr    $0x10,%eax
    8087:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    gdt.start16_31 = start & 0xFFFF;
    808c:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8091:	66 0f b7 c0          	movzwl %ax,%eax
    8095:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
    809a:	67 0f 01 55 f4       	lgdtw  -0xc(%ebp)
}
    809f:	90                   	nop
    80a0:	66 c9                	leavel 
    80a2:	66 c3                	retl   

000080a4 <show_msg>:
__asm__(".code16gcc");
#include "loader.h"
boot_info_t boot_info;
static void show_msg(const char *msg){
    80a4:	f3 0f 1e fb          	endbr32 
    80a8:	66 55                	push   %ebp
    80aa:	66 89 e5             	mov    %esp,%ebp
    80ad:	66 83 ec 10          	sub    $0x10,%esp
	char c;
	while (((c = *msg++) != '\0'))
    80b1:	eb 0c                	jmp    80bf <show_msg+0x1b>
	{
		asm(
    80b3:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    80b9:	b4 0e                	mov    $0xe,%ah
    80bb:	88 c0                	mov    %al,%al
    80bd:	cd 10                	int    $0x10
	while (((c = *msg++) != '\0'))
    80bf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80c4:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    80c9:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    80ce:	67 66 0f b6 00       	movzbl (%eax),%eax
    80d3:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    80d7:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    80dc:	75 d5                	jne    80b3 <show_msg+0xf>
			"int $0x10"::[ch]"r"(c)
		);

	}
	
}
    80de:	90                   	nop
    80df:	90                   	nop
    80e0:	66 c9                	leavel 
    80e2:	66 c3                	retl   

000080e4 <detect_memory>:
	{0,0,0,0},
	{0xFFFF,0x0000,0x9a00,0x00cf},
	{0xFFFF,0x0000,0x9200,0x00cf},
};

static void  detect_memory(void) {
    80e4:	f3 0f 1e fb          	endbr32 
    80e8:	66 55                	push   %ebp
    80ea:	66 89 e5             	mov    %esp,%ebp
    80ed:	66 57                	push   %edi
    80ef:	66 56                	push   %esi
    80f1:	66 53                	push   %ebx
    80f3:	66 83 ec 30          	sub    $0x30,%esp
	uint32_t contID = 0;
    80f7:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    80fe:	00 00 
	SMAP_entry_t smap_entry;
	int signature, bytes;

    show_msg("try to detect memory:");
    8100:	66 68 00 90 00 00    	pushl  $0x9000
    8106:	66 e8 98 ff ff ff    	calll  80a4 <show_msg>
    810c:	66 83 c4 04          	add    $0x4,%esp

	// 初次：EDX=0x534D4150,EAX=0xE820,ECX=24,INT 0x15, EBX=0（初次）
	// 后续：EAX=0xE820,ECX=24,
	// 结束判断：EBX=0
	boot_info.ram_region_count = 0;
    8110:	66 c7 06 b0 a0 00 00 	movl   $0x0,-0x5f50
    8117:	00 00 
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8119:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8120:	00 00 
    8122:	e9 d0 00             	jmp    81f5 <detect_memory+0x111>
		SMAP_entry_t * entry = &smap_entry;
    8125:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    812a:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

		__asm__ __volatile__("int  $0x15"
    812f:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8135:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    813a:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    8140:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    8146:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    814b:	66 89 f7             	mov    %esi,%edi
    814e:	cd 15                	int    $0x15
    8150:	66 89 da             	mov    %ebx,%edx
    8153:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    8158:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    815d:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
			: "=a"(signature), "=c"(bytes), "=b"(contID)
			: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
		if (signature != 0x534D4150) {
    8162:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    8169:	4d 53 
    816b:	74 13                	je     8180 <detect_memory+0x9c>
            show_msg("failed.\r\n");
    816d:	66 68 16 90 00 00    	pushl  $0x9016
    8173:	66 e8 2b ff ff ff    	calll  80a4 <show_msg>
    8179:	66 83 c4 04          	add    $0x4,%esp
    817d:	e9 92 00             	jmp    8212 <detect_memory+0x12e>
			return;
		}

		// todo: 20字节
		if (bytes > 20 && (entry->ACPI & 0x0001) == 0){
    8180:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    8186:	7e 13                	jle    819b <detect_memory+0xb7>
    8188:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    818d:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    8192:	66 83 e0 01          	and    $0x1,%eax
    8196:	66 85 c0             	test   %eax,%eax
    8199:	74 53                	je     81ee <detect_memory+0x10a>
			continue;
		}

        // 保存RAM信息，只取32位，空间有限无需考虑更大容量的情况
        if (entry->Type == 1) {
    819b:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81a0:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    81a5:	66 83 f8 01          	cmp    $0x1,%eax
    81a9:	75 39                	jne    81e4 <detect_memory+0x100>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    81ab:	66 a1 b0 a0          	mov    0xa0b0,%eax
    81af:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    81b4:	67 66 8b 12          	mov    (%edx),%edx
    81b8:	67 66 89 14 c5 60 a0 	mov    %edx,0xa060(,%eax,8)
    81bf:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    81c1:	66 a1 b0 a0          	mov    0xa0b0,%eax
    81c5:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    81ca:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    81cf:	67 66 89 14 c5 64 a0 	mov    %edx,0xa064(,%eax,8)
    81d6:	00 00 
            boot_info.ram_region_count++;
    81d8:	66 a1 b0 a0          	mov    0xa0b0,%eax
    81dc:	66 83 c0 01          	add    $0x1,%eax
    81e0:	66 a3 b0 a0          	mov    %eax,0xa0b0
        }

		if (contID == 0) {
    81e4:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    81ea:	74 15                	je     8201 <detect_memory+0x11d>
    81ec:	eb 01                	jmp    81ef <detect_memory+0x10b>
			continue;
    81ee:	90                   	nop
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    81ef:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    81f5:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    81fb:	0f 8e 26 ff          	jle    8125 <detect_memory+0x41>
    81ff:	eb 01                	jmp    8202 <detect_memory+0x11e>
			break;
    8201:	90                   	nop
		}
	}
    show_msg("ok.\r\n");
    8202:	66 68 20 90 00 00    	pushl  $0x9020
    8208:	66 e8 96 fe ff ff    	calll  80a4 <show_msg>
    820e:	66 83 c4 04          	add    $0x4,%esp
}
    8212:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8217:	66 5b                	pop    %ebx
    8219:	66 5e                	pop    %esi
    821b:	66 5f                	pop    %edi
    821d:	66 5d                	pop    %ebp
    821f:	66 c3                	retl   

00008221 <enter_protect_m>:

static void enter_protect_m(void){ //进入保护模式
    8221:	f3 0f 1e fb          	endbr32 
    8225:	66 55                	push   %ebp
    8227:	66 89 e5             	mov    %esp,%ebp
    822a:	66 83 ec 10          	sub    $0x10,%esp
	//关中断
	cli();
    822e:	66 e8 cf fd ff ff    	calll  8003 <cli>
	//打开A20地址线
	uint8_t ret = inb(0x92);
    8234:	66 68 92 00 00 00    	pushl  $0x92
    823a:	66 e8 ce fd ff ff    	calll  800e <inb>
    8240:	66 83 c4 04          	add    $0x4,%esp
    8244:	67 88 45 ff          	mov    %al,-0x1(%ebp)
	outb(0x92,ret | 0x2);
    8248:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    824e:	66 83 c8 02          	or     $0x2,%eax
    8252:	66 0f b6 c0          	movzbl %al,%eax
    8256:	66 50                	push   %eax
    8258:	66 68 92 00 00 00    	pushl  $0x92
    825e:	66 e8 d4 fd ff ff    	calll  8038 <outb>
    8264:	66 83 c4 08          	add    $0x8,%esp

	//加载GDT表
	lgdt((uint32_t)gdt_table , sizeof(gdt_table));
    8268:	66 b8 3c a0 00 00    	mov    $0xa03c,%eax
    826e:	66 6a 18             	pushl  $0x18
    8271:	66 50                	push   %eax
    8273:	66 e8 ef fd ff ff    	calll  8068 <lgdt>
    8279:	66 83 c4 08          	add    $0x8,%esp


}
    827d:	90                   	nop
    827e:	66 c9                	leavel 
    8280:	66 c3                	retl   

00008282 <loader_entry>:
void loader_entry(void){
    8282:	f3 0f 1e fb          	endbr32 
    8286:	66 55                	push   %ebp
    8288:	66 89 e5             	mov    %esp,%ebp
	show_msg("......loading.....\n\r");
    828b:	66 68 26 90 00 00    	pushl  $0x9026
    8291:	66 e8 0d fe ff ff    	calll  80a4 <show_msg>
    8297:	66 83 c4 04          	add    $0x4,%esp
	detect_memory();
    829b:	66 e8 43 fe ff ff    	calll  80e4 <detect_memory>
	enter_protect_m();
    82a1:	66 e8 7a ff ff ff    	calll  8221 <enter_protect_m>
    for(;;) {}
    82a7:	eb fe                	jmp    82a7 <loader_entry+0x25>
