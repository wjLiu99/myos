
/root/myos/build/source/loader/loader.elf：     文件格式 elf32-i386
/root/myos/build/source/loader/loader.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00008000

程序头：
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x000001a1 memsz 0x000001a1 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x0000003b memsz 0x0000003b flags r--
    LOAD off    0x00000040 vaddr 0x0000a040 paddr 0x0000a040 align 2**12
         filesz 0x00000000 memsz 0x00000054 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a1  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000003b  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000054  0000a040  0000a040  00002040  2**5
                  ALLOC
  3 .comment      0000002b  00000000  00000000  0000203b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00002068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000239  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000144  00000000  00000000  000022e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   00000180  00000000  00000000  00002425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00000078  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000234  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges 00000018  00000000  00000000  00002854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00009000 l    d  .rodata	00000000 .rodata
0000a040 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008003 l     F .text	00000040 show_msg
00008043 l     F .text	0000013d detect_memory
00000000 l    df *ABS*	00000000 loader_32.c
00008180 g     F .text	00000021 loader_entry
0000a040 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
0000a03b g       .bss	00000000 __bss_start
0000a03b g       .bss	00000000 _edata
0000a094 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
	.global _start
_start:
	


    jmp loader_entry
    8000:	e9 7d 01             	jmp    8180 <loader_entry>

00008003 <show_msg>:
__asm__(".code16gcc");
#include "loader.h"
boot_info_t boot_info;
static void show_msg(const char *msg){
    8003:	f3 0f 1e fb          	endbr32 
    8007:	66 55                	push   %ebp
    8009:	66 89 e5             	mov    %esp,%ebp
    800c:	66 83 ec 10          	sub    $0x10,%esp
	char c;
	while (((c = *msg++) != '\0'))
    8010:	eb 0c                	jmp    801e <show_msg+0x1b>
	{
		asm(
    8012:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8018:	b4 0e                	mov    $0xe,%ah
    801a:	88 c0                	mov    %al,%al
    801c:	cd 10                	int    $0x10
	while (((c = *msg++) != '\0'))
    801e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8023:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8028:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    802d:	67 66 0f b6 00       	movzbl (%eax),%eax
    8032:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8036:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    803b:	75 d5                	jne    8012 <show_msg+0xf>
			"int $0x10"::[ch]"r"(c)
		);

	}
	
}
    803d:	90                   	nop
    803e:	90                   	nop
    803f:	66 c9                	leavel 
    8041:	66 c3                	retl   

00008043 <detect_memory>:

static void  detect_memory(void) {
    8043:	f3 0f 1e fb          	endbr32 
    8047:	66 55                	push   %ebp
    8049:	66 89 e5             	mov    %esp,%ebp
    804c:	66 57                	push   %edi
    804e:	66 56                	push   %esi
    8050:	66 53                	push   %ebx
    8052:	66 83 ec 30          	sub    $0x30,%esp
	uint32_t contID = 0;
    8056:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    805d:	00 00 
	SMAP_entry_t smap_entry;
	int signature, bytes;

    show_msg("try to detect memory:");
    805f:	66 68 00 90 00 00    	pushl  $0x9000
    8065:	66 e8 98 ff ff ff    	calll  8003 <show_msg>
    806b:	66 83 c4 04          	add    $0x4,%esp

	// 初次：EDX=0x534D4150,EAX=0xE820,ECX=24,INT 0x15, EBX=0（初次）
	// 后续：EAX=0xE820,ECX=24,
	// 结束判断：EBX=0
	boot_info.ram_region_count = 0;
    806f:	66 c7 06 90 a0 00 00 	movl   $0x0,-0x5f70
    8076:	00 00 
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8078:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    807f:	00 00 
    8081:	e9 d0 00             	jmp    8154 <detect_memory+0x111>
		SMAP_entry_t * entry = &smap_entry;
    8084:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8089:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

		__asm__ __volatile__("int  $0x15"
    808e:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8094:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8099:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    809f:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    80a5:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    80aa:	66 89 f7             	mov    %esi,%edi
    80ad:	cd 15                	int    $0x15
    80af:	66 89 da             	mov    %ebx,%edx
    80b2:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    80b7:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    80bc:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
			: "=a"(signature), "=c"(bytes), "=b"(contID)
			: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
		if (signature != 0x534D4150) {
    80c1:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    80c8:	4d 53 
    80ca:	74 13                	je     80df <detect_memory+0x9c>
            show_msg("failed.\r\n");
    80cc:	66 68 16 90 00 00    	pushl  $0x9016
    80d2:	66 e8 2b ff ff ff    	calll  8003 <show_msg>
    80d8:	66 83 c4 04          	add    $0x4,%esp
    80dc:	e9 92 00             	jmp    8171 <detect_memory+0x12e>
			return;
		}

		// todo: 20字节
		if (bytes > 20 && (entry->ACPI & 0x0001) == 0){
    80df:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    80e5:	7e 13                	jle    80fa <detect_memory+0xb7>
    80e7:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    80ec:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    80f1:	66 83 e0 01          	and    $0x1,%eax
    80f5:	66 85 c0             	test   %eax,%eax
    80f8:	74 53                	je     814d <detect_memory+0x10a>
			continue;
		}

        // 保存RAM信息，只取32位，空间有限无需考虑更大容量的情况
        if (entry->Type == 1) {
    80fa:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    80ff:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8104:	66 83 f8 01          	cmp    $0x1,%eax
    8108:	75 39                	jne    8143 <detect_memory+0x100>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    810a:	66 a1 90 a0          	mov    0xa090,%eax
    810e:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8113:	67 66 8b 12          	mov    (%edx),%edx
    8117:	67 66 89 14 c5 40 a0 	mov    %edx,0xa040(,%eax,8)
    811e:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    8120:	66 a1 90 a0          	mov    0xa090,%eax
    8124:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8129:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    812e:	67 66 89 14 c5 44 a0 	mov    %edx,0xa044(,%eax,8)
    8135:	00 00 
            boot_info.ram_region_count++;
    8137:	66 a1 90 a0          	mov    0xa090,%eax
    813b:	66 83 c0 01          	add    $0x1,%eax
    813f:	66 a3 90 a0          	mov    %eax,0xa090
        }

		if (contID == 0) {
    8143:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8149:	74 15                	je     8160 <detect_memory+0x11d>
    814b:	eb 01                	jmp    814e <detect_memory+0x10b>
			continue;
    814d:	90                   	nop
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    814e:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8154:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    815a:	0f 8e 26 ff          	jle    8084 <detect_memory+0x41>
    815e:	eb 01                	jmp    8161 <detect_memory+0x11e>
			break;
    8160:	90                   	nop
		}
	}
    show_msg("ok.\r\n");
    8161:	66 68 20 90 00 00    	pushl  $0x9020
    8167:	66 e8 96 fe ff ff    	calll  8003 <show_msg>
    816d:	66 83 c4 04          	add    $0x4,%esp
}
    8171:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8176:	66 5b                	pop    %ebx
    8178:	66 5e                	pop    %esi
    817a:	66 5f                	pop    %edi
    817c:	66 5d                	pop    %ebp
    817e:	66 c3                	retl   

00008180 <loader_entry>:

void loader_entry(void){
    8180:	f3 0f 1e fb          	endbr32 
    8184:	66 55                	push   %ebp
    8186:	66 89 e5             	mov    %esp,%ebp
	show_msg("......loading.....\n\r");
    8189:	66 68 26 90 00 00    	pushl  $0x9026
    818f:	66 e8 6e fe ff ff    	calll  8003 <show_msg>
    8195:	66 83 c4 04          	add    $0x4,%esp
	detect_memory();
    8199:	66 e8 a4 fe ff ff    	calll  8043 <detect_memory>
    for(;;) {}
    819f:	eb fe                	jmp    819f <loader_entry+0x1f>
